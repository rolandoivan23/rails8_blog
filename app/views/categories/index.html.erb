<!-- categories/index.html.erb -->
<style>
  /* 
 * categories.css
 * Add this to your app/assets/stylesheets folder
 * Then import it in application.scss with: @import "categories";
 */

:root {
  --primary-color: #6366f1;
  --secondary-color: #8b5cf6;
  --dark-color: #1e293b;
  --light-color: #f8fafc;
  --accent-color: #ec4899;
}

/* Categories Layout */
.categories-container {
  max-width: 1400px;
  margin: 3rem auto;
  padding: 0 1.5rem;
}

.categories-title {
  font-size: 2.5rem;
  margin-bottom: 2rem;
  text-align: center;
  color: var(--dark-color);
  position: relative;
  padding-bottom: 1rem;
}

.categories-title::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
  width: 80px;
  height: 4px;
  background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
  border-radius: 4px;
}

/* Filter Buttons */
.categories-filter {
  display: flex;
  justify-content: center;
  gap: 1rem;
  margin-bottom: 2.5rem;
  flex-wrap: wrap;
}

.filter-btn {
  padding: 0.6rem 1.5rem;
  border: none;
  background: #f1f5f9;
  color: var(--dark-color);
  border-radius: 30px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
  font-size: 0.95rem;
}

.filter-btn::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  width: 0;
  height: 3px;
  background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
  transition: width 0.3s ease;
}

.filter-btn:hover {
  transform: translateY(-2px);
}

.filter-btn:hover::after {
  width: 100%;
}

.filter-btn.active {
  background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
  color: white;
  box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);
}

.filter-btn.active::after {
  display: none;
}


  .categories-filter {
    gap: 0.5rem;
  }
  
  .filter-btn {
    padding: 0.5rem 1rem;
    font-size: 0.85rem;
  }

  

 /* Categories Section */
        .categories {
            background-color: var(--light-color);
            padding: 4rem 0;
        }
        
        .categories-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1.5rem;
        }
        
        .category-card {
            background-color: white;
            border-radius: 8px;
            padding: 1.5rem;
            text-align: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }
        
        .category-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .category-icon {
            font-size: 2.5rem;
            color: var(--primary-color);
            margin-bottom: 1rem;
        }
        
        .category-title {
            font-size: 1.2rem;
            margin-bottom: 0.5rem;
        }

</style>
<div class="categories-container">
  <h1 class="categories-title">Explore Categories</h1>
  
  <div class="categories-filter">
    <%= link_to categories_path do %>
      <button class="filter-btn <%= 'active' if @tag == 'all' %>" data-filter="all">All</button>
    <% end %>
    <%= link_to categories_path(tag: 'Popular') do %>
      <button class="filter-btn <%= 'active' if @tag == 'popular' %>" data-filter="popular">Popular</button>
    <% end %>
    <%= link_to categories_path(tag: 'Recent') do %>
      <button class="filter-btn <%= 'active' if @tag == 'recent' %>" data-filter="recent">Recent</button>
    <% end %>
    <%= link_to categories_path(tag: 'Trending') do %>
      <button class="filter-btn" data-filter="trending">Trending</button>
    <% end %>
  </div>

  <div class="container">
      <div class="categories-grid">
        <% if @categories.size > 0 %>
          <% @categories.each do |category| %>
            <div class="category-card">
              <div class="category-icon" >
                <i class="fas fa-laptop-code"></i>
                </div>
              <h3 class="category-title"><%= category.name %></h3>
              <div class="post-count"><%= category.posts.count %> art√≠culos</div>
            </div>
          <% end %>  
        <% else %>
          <strong>No categories found</strong>
        <% end %>
      </div>
  </div>
    
  
<!-- Large featured category ->
  <div class="categories">
    <% Category.all.each do |category| %>
      <div class="category <%= ['featured', 'medium', 'small', 'large'].sample %>" style="background-image: url('<%= url_for(category.image) if category.image.attached? %>')">
        
        <div class="category-head"></div>
        <div class="category-cont">
          <h3 class="category-name"><%= category.name %></h3>
          <p class="category-count">47 Articles</p>
        
        </div>
      </div>
    <% end %>  

  
  <div class="category-actions">
    <button class="load-more-btn">Load More Categories</button>
  </div>
</div>

<%= content_for :headd do %>
  <script>
    document.addEventListener('DOMContentLoaded', function() {

       setTimeout(()=>{
        const  filterButtons = document.querySelectorAll('.filter-btn');
      
      filterButtons.forEach(button => {
        button.addEventListener('click', function() {
          // Remove active class from all buttons
          filterButtons.forEach(btn => btn.classList.remove('active'));
          
          // Add active class to clicked button
          this.classList.add('active');
          
          // Here you would typically filter the categories
          // For demonstration, just adding a visual feedback
          const filterType = this.getAttribute('data-filter');
          
          // Animation for items to show filter effect
          const allItems = document.querySelectorAll('.category-item');
          allItems.forEach(item => {
            item.style.opacity = '0.4';
            setTimeout(() => {
              item.style.opacity = '1';
            }, 300);
          });
        });
      });
      
      // Animation for categories when they come into view
      if ('IntersectionObserver' in window) {
        const options = {
          root: null,
          rootMargin: '0px',
          threshold: 0.1
        };
        
        const observer = new IntersectionObserver((entries, observer) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('animate-in');
              observer.unobserve(entry.target);
            }
          });
        }, options);
        
        document.querySelectorAll('.category-item').forEach(item => {
          observer.observe(item);
        });
      } else {
        // Fallback for browsers that don't support IntersectionObserver
        document.querySelectorAll('.category-item').forEach(item => {
          item.classList.add('animate-in');
        });
      }



       }, 1000)
      
    });
   
</script>    
<% end %>

< Add this to your application.js or a separate categories.js file -->


